// Code generated by gtml; DO NOT EDIT.
// v0.1.0 | you may see errors with types, you'll need to manage your own imports
// type support coming soon!

package components

import "strings"



func gtmlFor[T any](slice []T, callback func(i int, item T) string) string {
	var builder strings.Builder
	for i, item := range slice {
		builder.WriteString(callback(i, item))
	}
	return builder.String()
}

func gtmlIf(condition bool, fn func() string) string {
if condition {
	return fn()
}
	return ""
}

func gtmlElse(condition bool, fn func() string) string {
	if !condition {
		return fn()
	}
	return ""
}

func gtmlSlot(contentFunc func() string) string {
	return contentFunc()
}

func gtmlEscape(input string) string {
	return input
}

func Layout(title string) string {
	layout := func() string {
		var layoutBuilder strings.Builder
		staciheaderPlaceholder1 := func() string {
			return StaciHeader()
		}
		pageturnPlaceholder2 := func() string {
			return PageTurn("/signals", "Next", "/", "Prev", "true")
		}
		layoutBuilder.WriteString(`<html _component="Layout" _id="0"><head><meta name="viewport" content="width=device-width, initial-scale=1"/><meta charset="UTF-8"/><link rel="stylesheet" href="/static/css/output.css"/><script src="/static/js/staci.js"></script><title>`)
		layoutBuilder.WriteString(title)
		layoutBuilder.WriteString(`</title></head><body class="bg-black h-full text-white"><st-scrollbar></st-scrollbar>`)
		layoutBuilder.WriteString(staciheaderPlaceholder1())
		layoutBuilder.WriteString(`<div class="flex h-[90px] w-full"></div><div class="p-4"><st-markdown class="custom-scrollbar rounded border-b border-gray-800" st-ignore="true"><h1 id="staci">Staci</h1><p>drop-in, reactive signals ü§å</p><h2 id="counter-example">Counter Example</h2><button class="bg-black border border-gray-800 w-fit rounded px-2 py-1 mb-4 text-sm text-gray-400"><script>staci.signal("count", 0);staci.event("increment-count", () => {let count = staci.getSignal("count");count.set(count.val() + 1);});</script><span class="pr-4" st-click="increment-count">Increment</span><st-signal st-force="true">{{ count }}</st-signal></button><pre style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>&lt;<span style="color:#ff79c6">script</span>&gt;</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    staci.signal(<span style="color:#f1fa8c">&#34;count&#34;</span>, <span style="color:#bd93f9">0</span>);</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    staci.event(<span style="color:#f1fa8c">&#34;increment-count&#34;</span>, () =&gt; {</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>        <span style="color:#8be9fd;font-style:italic">let</span> count <span style="color:#ff79c6">=</span> staci.getSignal(<span style="color:#f1fa8c">&#34;count&#34;</span>);</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>        count.set(count.val() <span style="color:#ff79c6">+</span> <span style="color:#bd93f9">1</span>);</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    });</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>&lt;/<span style="color:#ff79c6">script</span>&gt;</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>&lt;<span style="color:#ff79c6">button</span> <span style="color:#50fa7b">st-click</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;increment-count&#34;</span>&gt;</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    &lt;<span style="color:#ff79c6">p</span>&gt;Increment&lt;/<span style="color:#ff79c6">p</span>&gt;</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    &lt;<span style="color:#ff79c6">st-signal</span>&gt;{{ count }}&lt;/<span style="color:#ff79c6">st-signal</span>&gt;</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>&lt;/<span style="color:#ff79c6">button</span>&gt;</span></span></code></pre><h2 id="use-case">Use-Case</h2><p><code>staci</code> is all about <em>compliementing</em> existing HTML. Other solutions dictate the way you write your HTML. When you want to generate HTML, you must do so <strong>with the framework</strong>.</p><p><code>staci</code> is different. She is not about replacing you&#39;re existing wife__ I mean system. Rather, <code>staci</code> intends to join-in where needed and can be adopted incrementally overtime.</p><h2 id="philosophy">Philosophy</h2><p>Imagine if signals were available natively in the DOM. That is the vibe <code>staci</code> attempts to create.</p><p>Using signals should feel <em>natural</em>.</p><p><img src="/static/img/buddy.jpg" alt="Natural"/></p></st-markdown></div>`)
		layoutBuilder.WriteString(pageturnPlaceholder2())
		layoutBuilder.WriteString(`<footer class="p-4 text-sm italic border-t border-gray-800"><p>&#34;M-M-Mama says alligators are so ornery &#39;cause they got all them teeth and no toothbrush. üêä&#34; - Adam Sandler, *The Waterboy*</p></footer></body></html>`)
		return layoutBuilder.String()
	}
	return gtmlEscape(layout())
}

func StaciHeader() string {
	staciheader := func() string {
		var staciheaderBuilder strings.Builder
		staciheaderBuilder.WriteString(`<header _component="StaciHeader" class="p-4 flex fixed w-full flex-row justify-between border-b border-gray-800 text-white bg-black h-[90px]" _id="0"><div class="flex"><div class="flex w-10 items-center justify-center"><img src="/static/img/logo-dark.svg" class="flex h-full"/></div></div><div class="flex items-center justify-center"><div><svg class="w-8 h-8 text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M5 7h14M5 12h14M5 17h14"></path></svg></div></div></header>`)
		return staciheaderBuilder.String()
	}
	return gtmlEscape(staciheader())
}

func PageTurn(nextHref string, nextTitle string, prevHref string, prevTitle string, prevHidden bool) string {
	pageturn := func() string {
		var pageturnBuilder strings.Builder
		prevHiddenIf1 := gtmlIf(prevHidden, func() string {
			var prevHiddenBuilder strings.Builder
			prevHiddenBuilder.WriteString(`<a _if="prevHidden" class="px-4 py-2 border rounded border-gray-800 text-sm w-[33%] flex items-center justify-center" href="`)
			prevHiddenBuilder.WriteString(prevHref)
			prevHiddenBuilder.WriteString(`" _id="1"><h2 class="font-bold text-dracula-yellow">`)
			prevHiddenBuilder.WriteString(prevTitle)
			prevHiddenBuilder.WriteString(`</h2></a>`)
			if prevHidden {
				return prevHiddenBuilder.String()
			}
			return ""
		})
		pageturnBuilder.WriteString(`<section _component="PageTurn" class="flex flex-row justify-between p-4" _id="0">`)
		pageturnBuilder.WriteString(prevHiddenIf1)
		pageturnBuilder.WriteString(`<a class="px-4 py-2 border rounded border-gray-800 text-sm w-[33%] flex items-center justify-center" href="`)
		pageturnBuilder.WriteString(nextHref)
		pageturnBuilder.WriteString(`"><h2 class="font-bold text-dracula-yellow">`)
		pageturnBuilder.WriteString(nextTitle)
		pageturnBuilder.WriteString(`</h2></a></section>`)
		return pageturnBuilder.String()
	}
	return gtmlEscape(pageturn())
}

